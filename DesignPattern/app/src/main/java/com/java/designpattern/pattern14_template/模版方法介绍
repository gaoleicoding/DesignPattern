优缺点及适用场景

优点：模板方法所不变的行为搬到超类，去除子类中的重复代码，提供了一个很好了代码复用平台；

缺点：当类的功能越来越多，变得复杂时，抽象类的管理和扩展就变得复杂了。

适用场景：一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。

各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。
