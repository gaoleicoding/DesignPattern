builder模式怎么构建的。

新建静态内部类 Builder ，也就是汽车制造商，我们的 car 交给他来制造，car 需要的属性 全部复制进来
定义 Builder 空构造，初始化 car 默认值。这里是为了初始化构造的时候，不要再去特别定义属性，直接使用默认值。定义 Builder 构造，传入 Car ，构造里面执行 Car 属性赋值 给 Builder 对应属性的操作，目的是为了重建一个builder 进行返厂重造
定义一系列方法进行属性初始化，这些方法跟 JavaBeans 模式构建 中的方法类似，不同的是，返回值为 Builder 类型，为了方便链式调用。最后定义方法返回实体 Car 对象，car 的构造器 持有 Builder,最终将builder制造的组件赋值给 car 完成构建
至此，我们的 Builder 模式体验就结束了，这里讲的只是 Builder 模式的一个变种，即在 android 中应用较为广泛的模式，下面总结一下优缺点：

优点：

解耦，逻辑清晰。统一交由 Builder 类构造，Car 类不用关心内部实现细节，只注重结果。

链式调用，使用灵活，易于扩展。相对于方法一中的构造器方法，配置对象属性灵活度大大提高，支持链式调用使得逻辑清晰不少，而且我们需要扩展的时候，也只需要添加对应扩展属性即可，十分方便。

缺点：

硬要说缺点的话 就是前期需要编写更多的代码，每次构建需要先创建对应的 Builder 对象。但是这点开销几乎可以忽略吧，前期编写更多的代码是为了以后更好的扩展，这不是优秀程序员应该要考虑的事么
解决方法： 不会偷懒的程序猿不是好程序猿，针对以上缺点，IDEA 系列的 ide ，有相应的插件 InnerBuilder 可以自动生成 builder 相关代码，安装自行 google，使用的时候只需要在实体类中 alt + insert 键，会有个 build 按钮提供代码生成。

使用场景
一般如果类属性在4个以上的话，建议使用 此模式。还有如果类属性存在不确定性，可能以后还会新增属性时使用，便于扩展。